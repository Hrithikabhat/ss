#include<stdio.h>
int main(){
	int count,j,n,time,flag=0,time_quantum,ch=0;
	int wait_time=0,turnaround_time=0,at[10],bt[10],rt[10];
	int endTime,i,smallest;
	int remain=0,sum_wait=0,sum_turnaround=0;
	printf("\n1.Round Robin \n2.STRF\n");
	scanf("%d",&ch);
	printf("\nEnter the number of processes:\n");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		printf("\nEnter the arrival time for burst:\n");
		scanf("%d",&at[i]);
		printf("\nEnter the bus time for burst:\n");
		scanf("%d",&bt[i]);
		rt[i]=bt[i];
	}
	switch(ch){
		case 1:	printf("\nEnter the quantum time:\n");
			scanf("%d",&time_quantum);
			remain=n;
			printf("\nProcess id\t Turnaround Time\t Waiting Time\n");
			for(time=0,count=0;remain!=0;){
				if(rt[count]<=time_quantum && rt[count]>0){
					time+=rt[count];
					rt[count]=0;
					flag=1;
				}
				else if(rt[count]>0){
					time+=time_quantum;
					rt[count]-=time_quantum;	
				}
				if(rt[count]==0 && flag==1){
					remain--;
					printf("\nP[%d]\t\t[\t%d\t]\t\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
					wait_time+=time-at[count]-bt[count];
					turnaround_time+=time-at[count];
					flag=0;
				}
				if(count==n-1)
					count=0;
				else if(at[count+1]<=time)
					count++;
				else
					count=0;
			}
			printf("\nAverage Waiting Time=%.2f\n",wait_time*1.0/n);
			printf("\nAverage Turnaround Time=%.2f\n",turnaround_time*1.0/n);
			break;
		case 2: remain=0;
			printf("\nProcess id\t Turnaround Time\t Waiting Time\n");
			rt[9]=9999;
			for(time=0;remain!=n;time++){
				smallest=9;
				for(i=0;i<n;i++)
					if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)
						smallest=i;
				rt[smallest]--;
				if(rt[smallest]==0){
					remain++;
					endTime=time+1;
					printf("\nP[%d]\t\t[\t%d\t]\t\t%d\n",smallest+1,endTime-at[smallest],endTime-at[smallest]-bt[smallest]);
					printf("\n");
					sum_wait+=endTime-at[smallest]-bt[smallest];
					sum_turnaround+=endTime-at[smallest];
				}
			}
			printf("\nAverage Waiting Time=%.2f\n",sum_wait*1.0/n);
			printf("\nAverage Turnaround Time=%.2f\n",sum_turnaround*1.0/n);
			break;
		default: printf("\nInvalid\n");
	}
	return 0;
}
